App Integration
===============

It is pretty easy to integrate your own django applications with django-cms.
You have 4 ways of integrating your app:

1. App-Hooks
	
	Attach an apps urls.py to a page
	
2. Navigation Extenders

	Extend the menu with your own entries
	
3. Navigation Modifiers

	Modify the whole menu tree 
	
4. Custom Plugins

	Display your models / content in cms pages

App-Hooks
---------

**`CMS_APPLICATION_URLS`**

With this settings you can add urls.py of your applications to a list
that will show up in the advanced settings tab of a page.

Put this in your settings.py.

Example:

	CMS_APPLICATION_URLS = (
		("myapp.urls", gettext("My Application")),
		("myotherapp.urls", gettext("My other Application")),
	)

Now edit a page and select an entry in the advanced settings tab. Save the page.
After this you need to restart the server because the urls are cached by django and 
in a multi-threaded environment we don't know which caches are cleared yet.

If you attached the app to a page with the url `/hello/world/` and the app has a urls.py 
that looks like this:

from django.conf.urls.defaults import *

	urlpatterns = patterns('sampleapp.views',
	    url(r'^$', 'main_view', name='app_main'),
	    url(r'^sublevel/$', 'sample_view', name='app_sublevel'),
	)
	
The 'main_view' should now be available at `/hello/world/` and the 'sample_view' has the url
'/hello/world/sublevel/'.


**ATTENTION**

All views that are attached like this must return the RequestContext besides the normal Context.

**Language Namespaces**

An additional feature of apphooks is that if you use the MultilingualURLMiddleware all apphook urls
are language namespaced.

What this means:

To reverse the first url from above you would use something like this in your template:

	{% url app_main %}

To access the url based on a language you now can use namespaces:

	{% url de:app_main %}
	{% url en:app_main %}
	{% url fr:app_main %}
	
To make the use of language namespaces optional and that you don't have to rewrite all your templates:
We have overwritten the standard url templatetag. As soon as you `{% load cms_tags %}` the `{% url %}`
templatetag gets overwritten. 

What the new tag does:

 - Adds automatically the current language as a namespace to the view name if no namespace is given.
 - Adds the language prefix to language namespaced urls.
 
Everything else should work as the old url tag.

Navigation Extenders
--------------------

The menu can be extended with static or dynamic content.
For example, you may have a shop with categories and want these categories to be displayed in the navigation.

Add the following to your ``settings.py`` file::

	CMS_NAVIGATION_EXTENDERS = (('shop.utils.get_nodes', gettext('Shop Categories')),)

Now you can link a navigation extender to a page in the 'Advanced' tab of the page settings.

An example of an extender function is in ``utils.py`` in ``myapp`` in the example project included in the source::

    from categories.models import Category
    
    def get_nodes(request):
        categories = list(Category.objects.all())
        res = [] # result list
        all_categories = categories[:]
        child_categories = [] # all categories with a parent

        # put all of the child categories in a list of their
        # own (children) and add all of the parent categories
        # (that is, categories with no parent) to the result list
        for category in categories:
            if category.parent_id:
                # this is a child category
                child_categories.append(category)
            else:
                # this is a parent category
                res.append(category)

        # now go through each parent category, putting its children
        # in a list called 'childrens' (because 'children' has already
        # been taken by mptt)
        for category in all_categories:
            category.childrens = []
            for child in children_categories:
                if child.parent_id == category.pk:
                    category.childrens.append(child)
        return res
    
The model would look something like this::

    from django.db import models
    from django.core.urlresolvers import reverse
    import mptt
    
    class Category(models.Model):
        parent = models.ForeignKey('self', blank=True, null=True)
        name = models.CharField(max_length=20)
     
        def __unicode__(self):
            return self.name
        
        def get_menu_title(self):
            return self.name
        
        def get_absolute_url(self):
            return reverse('category_view', args=[self.pk])
        
        try:
            mptt.register(Category)
        except mptt.AlreadyRegistered:
            pass

It is encouraged to use `django-mptt <http://code.google.com/p/django-mptt/>`_ (a
suitable version is included in the `mptt` directory) for the tree
structure because of performance considerations.
The objects provided must adhere to the following structure:

Each must have a ``get_menu_title`` function, a ``get_absolute_url`` function, and a
``childrens`` array with all of its children inside (the 's' at the end of ``childrens`` is done on purpose
because ``children`` is already taken by mptt).

Be sure that ``get_menu_title`` and ``get_absolute_url`` don't trigger any queries when called in a template or you 
may have some serious performance and DB problems with a lot of queries.

It may be wise to cache the output of ``get_nodes``. For this you may need to write a wrapper class because of
dynamic content that the pickle module can't handle. 

If you want to display some static pages in the navigation ("login", for example) you can write your own "dummy" class that adheres to the conventions described above.

A base class for this purpose can be found in ``cms/utils/navigation.py``


Navigation Modifiers
--------------------

Custom Plugins
--------------



 